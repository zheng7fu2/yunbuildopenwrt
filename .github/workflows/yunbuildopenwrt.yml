name: 云编译OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH连接到Github Actions'
        required: false
        default: 'false'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  OPENWRTSRC: openwrtsrc
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  CUSTOMFEEDSSH: customfeeds.sh
  CUSTOMCONFIGSSH: customconfigs.sh
  UPLOAD_BIN_DIR: true
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai

jobs:
  ubuntu:
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: 初始化
      env:
        DEBIAN_FRONTEND: noninteractive
      run: chmod -R 0770 init.sh && bash init.sh
        

    - name: Clone源码
      working-directory: /yunbuildopenwrt
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH $OPENWRTSRC
        ln -sf /yunbuildopenwrt/$OPENWRTSRC $GITHUB_WORKSPACE/$OPENWRTSRC

    - name: 加载custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF $OPENWRTSRC/feeds.conf.default
        chmod +x $CUSTOMFEEDSSH
        cd $OPENWRTSRC
        $GITHUB_WORKSPACE/$CUSTOMFEEDSSH

    - name: 更新feeds
      run: cd $OPENWRTSRC && ./scripts/feeds update -a

    - name: 安装feeds
      run: cd $OPENWRTSRC && ./scripts/feeds install -a

    - name: 加载custom配置
      run: |
        [ -e files ] && mv files $OPENWRTSRC/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRTSRC/.config
        chmod +x $CUSTOMCONFIGSSH
        cd $OPENWRTSRC
        $GITHUB_WORKSPACE/$CUSTOMCONFIGSSH

    - name: 下载package
      id: package
      run: |
        cd $OPENWRTSRC
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: 编译固件
      id: compile
      run: |
        cd $OPENWRTSRC
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 检查磁盘使用
      if: (!cancelled())
      run: df -hT

    - name: 上传bin目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: $OPENWRTSRC/bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd $OPENWRTSRC/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: 上传固件目录
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: 创建release标签
      id: tag
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        echo "::set-output name=status::success"

    - name: 上传固件到release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: 删除workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: 删除旧的Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUBTOKEN }}
